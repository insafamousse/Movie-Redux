{"version":3,"sources":["Plus.png","MovieCard.js","action/action.js","action/type.js","MovieList.js","App.js","serviceWorker.js","Reducer/Rating2.js","Reducer/Title.js","Reducer/MovieListReducer.js","Reducer/index.js","store.js","index.js"],"names":["module","exports","connect","dispatch","removeMovie","newId","type","deleteMovie","Y","Card","className","name","starCount","value","rating","CardImg","top","height","src","image","alt","CardBody","CardTitle","title","onClick","id","MovieList","state","this","props","MoviesPlus","movies","onAddMovie","map","el","key","Plus","style","width","Component","MovieListReducer","newMovie","addMovies","Math","random","prompt","Number","App","Boolean","window","location","hostname","match","ratingFilterReducer","action","minRating","titleFilterReducer","titleFilter","initialState","concat","filter","index","combineReducers","createStore","rootReducer","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","store","Store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,kC,+QCqC3BC,cAAS,MALE,SAAAC,GACvB,MAAM,CACFC,YAAa,SAAAC,GAAK,OAAIF,EC1BA,SAACE,GACxB,MAAO,CACFC,KCTe,gBDUfD,SDuB2BE,CAAYF,QAGnCH,EA1BE,SAAC,GAAoB,IAAnBM,EAAkB,EAAlBA,EAAEJ,EAAgB,EAAhBA,YAElB,OAEQ,kBAACK,EAAA,EAAD,CAAMC,UAAU,eACZ,yBAAKA,UAAU,SACnB,kBAAC,IAAD,CACIC,KAAK,QACLC,UAAW,EACXC,MAAOL,EAAEM,SAET,kBAACC,EAAA,EAAD,CAASC,KAAG,EAACC,OAAO,QAAQC,IAAKV,EAAEW,MAAOC,IAAI,mBAC9C,kBAACC,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,KAAYd,EAAEe,SAGd,4BAAQC,QAAW,kBAAMpB,EAAYI,EAAEiB,MAAvC,e,mPGrBTC,E,2MACHC,MAAQ,CACJF,GAAI,EACJF,MAAO,GACPT,OAAQ,G,wEAEH,IAAD,SACmDc,KAAKC,MAApDC,EADJ,EACIA,WAAYC,EADhB,EACgBA,OADhB,EACwBC,WAC5B,OAEI,yBAAKtB,UAAU,aACf,yBAAKA,UAAU,OAEVqB,EAAOE,KAAI,SAAAC,GAAE,OAAI,kBAAC,EAAD,CAAWC,IAAKD,EAAGT,GAAIjB,EAAG0B,QAEhD,6BAEI,yBAAKhB,IAAKkB,IAAMC,MAAO,CAACC,MAAO,QAAS5B,UAAU,gBAAgBc,QAAS,WACvEM,E,yVAAW,CAAD,GAAK,EAAKH,SACrBrB,KAAK,SAASc,IAAI,uB,GAnBZmB,aA0CVrC,eAdS,SAAAyB,GACpB,MAAM,CACFI,OAAQJ,EAAMa,qBAGK,SAAArC,GACvB,MAAO,CACH2B,WAAa,SAAAW,GAAQ,OAAItC,EFxCL,SAACsC,GACtB,MAAO,CACHnC,KCHc,YDIdmC,YEqC+BC,CAAmB,CACjDjB,GAAIkB,KAAKC,SACTrB,MAAOsB,OAAO,iBACd/B,OAAQgC,OAAOD,OAAO,0BAInB3C,CAA4CwB,GChC1CqB,MAZjB,WACE,OAEE,yBAAMrC,UAAW,OAEf,kBAAC,EAAD,QCGcsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCXSC,EAPY,WAAmB,IAAlB1B,EAAiB,uDAAX,EAAE2B,EAAS,uCACzC,MAAkB,eAAdA,EAAOhD,KACAgD,EAAOC,UAEX5B,GCGI6B,EAPU,WAAoB,IAAnB7B,EAAkB,uDAAZ,GAAG2B,EAAS,uCACxC,MAAkB,qBAAdA,EAAOhD,KACAgD,EAAOG,YAEX9B,GCHL+B,EAAe,CACjB,CACIjC,GAAGkB,KAAKC,SACRrB,MAAO,WACPJ,MAAO,mEACPL,OAAQ,GAGZ,CAACW,GAAGkB,KAAKC,SACLrB,MAAO,iBACPJ,MAAO,kHACPL,OAAQ,GAEZ,CAACW,GAAGkB,KAAKC,SACLrB,MAAO,eACPJ,MAAQ,kGACRL,OAAQ,GAEZ,CAACW,GAAGkB,KAAKC,SACLrB,MAAO,cACPJ,MAAO,yHACPL,OAAQ,IAkBD0B,EAfS,WAA+B,IAA9Bb,EAA6B,uDAAvB+B,EAAcJ,EAAS,uCAClD,OAAOA,EAAOhD,MACV,IN3BiB,YM4BjB,OACIqB,EAAMgC,OAAOL,EAAOb,UAGxB,IN/BmB,gBMgCf,OACGd,EAAMiC,QAAO,SAAC1B,EAAG2B,GAAJ,OAAY3B,EAAGT,KAAK6B,EAAOjD,SAE/C,QAAU,OAAOsB,IC/BVmC,cAAgB,CAACT,sBAC9BG,qBAAmBhB,qBCJNuB,cAAYC,EAAaf,OAAOgB,8BAAgChB,OAAOgB,gCCUtFC,IAASC,OAAQ,kBAAE,IAAF,CAAWC,MAAOC,GAAlB,IAA2B,kBAAC,EAAD,OAAoBC,SAASC,eAAe,SNqHlF,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.19962dcf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Plus.1475a81f.png\";","import React from 'react';\r\nimport StarRatingComponent from 'react-star-rating-component';\r\nimport { Card, CardImg, CardBody,\r\n    CardTitle } from 'reactstrap';\r\nimport {connect} from 'react-redux';\r\nimport {deleteMovie} from './action/action' \r\n\r\n\r\n\r\n\r\n\r\nconst MovieCard = ({Y,removeMovie}) =>{ \r\n    \r\n    return(\r\n       \r\n            <Card className='col-3 card1'>\r\n                <div className=\" List\"> \r\n            <StarRatingComponent \r\n                name=\"rate1\" \r\n                starCount={5}\r\n                value={Y.rating}\r\n            />\r\n                <CardImg top height=\"300px\" src={Y.image} alt=\"Card image cap\" />\r\n                <CardBody>\r\n                <CardTitle>{Y.title}</CardTitle>\r\n                </CardBody>\r\n                </div>\r\n                <button onClick = {() => removeMovie(Y.id) }>Delete </button>\r\n            </Card>\r\n        \r\n    )\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return{\r\n        removeMovie: newId => dispatch(deleteMovie(newId))\r\n    }\r\n}\r\nexport default  connect (null,mapDispatchToProps)(MovieCard);","  import {ADDMOVIES, DELETEMOVIES } from './type' \r\n   export const addMovies = (newMovie) => {\r\n       return {\r\n           type : ADDMOVIES,\r\n           newMovie\r\n       }\r\n\r\n   } \r\n   export const deleteMovie = (newId) => {\r\n       return {\r\n            type : DELETEMOVIES,\r\n            newId\r\n        }\r\n    }\r\n    \r\n","export const ADDMOVIES = 'ADDMOVIES' \r\nexport const DELETEMOVIES =' DELETEMOVIES' ","import React, { Component } from 'react';\r\nimport MovieCard from './MovieCard';\r\nimport { connect } from 'react-redux'\r\nimport Plus from './Plus.png';\r\nimport { addMovies } from './action/action';\r\n\r\nclass  MovieList extends Component{\r\n    state = { \r\n        id: 6,\r\n        title: '',\r\n        rating: 1\r\n     }\r\n    render(){\r\n        const { MoviesPlus, movies, onAddMovie = () => { } } = this.props\r\n        return (\r\n            \r\n            <div className='card-list'>\r\n            <div className=\"row\">\r\n\r\n                {movies.map(el => <MovieCard key={el.id} Y={el} />)}\r\n            </div>\r\n            <div >\r\n\r\n                <img src={Plus} style={{width: \"50px\"}} className='prompt-button' onClick={() => {\r\n                    MoviesPlus({...this.state})\r\n                }} type=\"button\" alt=\"image-prompt\" />\r\n            </div>\r\n        </div>\r\n    )\r\n    \r\n    \r\n}\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return{\r\n        movies: state.MovieListReducer\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        MoviesPlus : newMovie => dispatch(addMovies(newMovie={\r\n            id: Math.random(),\r\n            title: prompt('movie title: '),\r\n            rating: Number(prompt('movie rating: '))\r\n        }))\r\n    }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(MovieList); ","import React from 'react';\nimport './App.css'; \nimport MovieList from './MovieList'\n\nfunction App() {\n  return (\n\n    <div  className =\"App\">\n    \n      <MovieList /> \n      \n    </div>\n\n\n  );  \n} \n export default  App  ;   \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const ratingFilterReducer =(state=1,action)=>{\r\n    if (action.type==='SET_RATING'){\r\n        return action.minRating\r\n    }\r\n    return state\r\n    \r\n}\r\nexport default ratingFilterReducer;\r\n","const titleFilterReducer=(state='',action)=>{\r\n    if (action.type==='SET_TITLE_FILTER'){\r\n        return action.titleFilter\r\n    }\r\n    return state\r\n\r\n}\r\nexport default titleFilterReducer;\r\n","import {ADDMOVIES,DELETEMOVIES} from '../action/type' \r\nconst initialState = [\r\n    {\r\n        id:Math.random(),\r\n        title: 'Brid Box',\r\n        image: 'https://images-eu.ssl-images-amazon.com/images/I/41sRIihnXzL.jpg',\r\n        rating: 5 ,\r\n    },\r\n\r\n    {id:Math.random(),\r\n        title: 'Game of throne',\r\n        image: ' https://target.scene7.com/is/image/Target/GUEST_968b46db-9670-48a8-aae7-62b26de5d4be?wid=488&hei=488&fmt=pjpeg',\r\n        rating: 4 },\r\n\r\n    {id:Math.random(),\r\n        title: 'EScape Room ',\r\n        image : ' https://m.media-amazon.com/images/M/MV5BMjQ2NDMwMTY3MF5BMl5BanBnXkFtZTgwNDg5OTc1NjM@._V1_.jpg ' , \r\n        rating: 4},\r\n        \r\n    {id:Math.random(),\r\n        title: ' Toy Story ',\r\n        image: '  https://vignette.wikia.nocookie.net/pixar/images/b/b8/OriginalToyStoryVHSCover.jpg/revision/latest?cb=20150623115504' , \r\n        rating: 3 }\r\n    \r\n]\r\nconst MovieListReducer =(state=initialState, action)=>{\r\n    switch(action.type) {\r\n        case ADDMOVIES : \r\n        return (\r\n            state.concat(action.newMovie) \r\n\r\n        )\r\n        case DELETEMOVIES:\r\n            return(\r\n               state.filter((el,index)=>el.id!==action.newId ) \r\n            )\r\n        default : return state \r\n    }\r\n    \r\n}\r\nexport default MovieListReducer ; ","import {combineReducers} from 'redux';\r\nimport ratingFilterReducer from './Rating2';\r\nimport titleFilterReducer from './Title';\r\nimport MovieListReducer from './MovieListReducer';\r\n\r\nexport default combineReducers({ratingFilterReducer,\r\n  titleFilterReducer,MovieListReducer})\r\n","import {createStore} from 'redux'   \r\nimport rootReducer from './Reducer' \r\nexport default createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())           \r\n        ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Store from './store'  ;\nimport {Provider} from 'react-redux' ;   \n   \n  \n  \n \n \nReactDOM.render( < Provider store={Store} > <App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}